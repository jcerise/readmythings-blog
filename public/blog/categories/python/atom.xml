<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Read My Things]]></title>
  <link href="http://www.readmythings.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.readmythings.com/"/>
  <updated>2013-08-31T23:48:26-06:00</updated>
  <id>http://www.readmythings.com/</id>
  <author>
    <name><![CDATA[Jeremy Cerise]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating realistic (two dimensional) caverns with cellular automata]]></title>
    <link href="http://www.readmythings.com/blog/2013/02/20/generating-realistic-caverns-with-cellular-automata/"/>
    <updated>2013-02-20T15:25:00-07:00</updated>
    <id>http://www.readmythings.com/blog/2013/02/20/generating-realistic-caverns-with-cellular-automata</id>
    <content type="html"><![CDATA[<p>I have been building a roguelike game in python for a while now. For
those not familiar with this particular type of game, I will point you
<a href="http://en.wikipedia.org/wiki/Roguelike">here</a>. Basically, its, as my
girlfriend put it, "About the nerdiest thing you can possibly do with a
computer". Opinions aside, roguelikes are very enjoyable to write, as
I've found, as you can focus solely on gameplay, and not worry about
fancy rendering engines and lots of 3D math.</p>

<!-- more -->


<p>One of the staples of a roguelike is the dungeon generation algorithm.
Since 99% of a traditional roguelike is spent crawling through a dungeon
in search of monsters to slay and epic loot to pocket, its rather
important that the player is presented with an interesting series of
paths and environments to traipse through. Many roguelikes challenge the
player with naviagting exclusively dungeon environments (straight
corridors, connecting rooms, which in turn are usually rectangular in
shape), and not much else. To be sure, my roguelike (<a href="https://github.com/jcerise/DungeonCrawler">DungeonCrawler</a>),
employs this formula, but I felt it lacked some variety. It gets tedious
constantly exploring the same environment over and over again. So, after
a little thought about what other types of subterranean labyrinth I
could throw at the player, I settled on caverns. Caverns present an
interesting challenge, as they need to look natural, which means no
straight lines, and also unpredictable corridors and rooms.</p>

<p>I ended up implementing a celluar automata algorithm to accomplish my
cavern building. Cellular automata, if you are unfamiliar, is the
concept behind Conways Game of Life. Basically, each tile in our cavern
can have one of two states: floor or wall. We start out by randomly
filling our entire map with tiles. I use the ratio of roughly 40% wall
tiles to 60% floor tiles (this tends to generate the nicest looking
results, in my experience).</p>

<p>{% codeblock Cavern Generation - Step 1 lang:python %}
for x in range(0, len(self.map)):</p>

<pre><code>for y in range(0, len(self.map[x])):
    if randrange(0, 100) &lt; 42:
        self.map[x][y].blocked = True
        self.map[x][y].block_sight = True
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% img /images/dungeoncrawler/step_1.png %}</p>

<p>As you can see, it looks pretty chaotic at this point. This will form
the basis for our cavern. For the record, brown tiles are floor, and
grey tiles are wall. The next step is to actually run our cellular
automata algorithm. I started out using the 4-5 rule (if a tile was a
wall and 4 or more of its neighbors are walls, it becomes a wall, or if
it was not a wall and 5 or more of its neighbors are walls). We pass
over each tile, and check its neighbors, and decide if it should be a
wall or a floor, based on the above stated criteria. The code to
accomplish this looks like this:</p>

<p>{% codeblock Cavern Generation - Step 2 lang:python %}
for _ in range(5):</p>

<pre><code>for x in range(0, len(self.map)):
    for y in range(0, len(self.map[x])):
        wall_count_one_away = self.count_walls_n_steps_away(self.map, 1, x, y)
        wall_count_two_away = self.count_walls_n_steps_away(self.map, 2, x, y)
        tile = self.map[x][y]
        if wall_count_one_away &gt;= 5 or wall_count_two_away &lt;= 2:
            #This tile becomes a wall
            tile.blocked = True
            tile.block_sight = True
        else:
            tile.blocked = False
            tile.block_sight = False
</code></pre>

<p>{% endcodeblock %}</p>

<p>We make several passes like this, in my case 5. Each pass will smooth
out the cavern a little bit more, as the code decides, based on the
tiles neighbors, what each tile should be. If there are a lot of walls
around it, it should probably be a wall, and vice versa. Below you can
see the results of this after one pass (comapre it to our starting map
above):</p>

<p>{% img /images/dungeoncrawler/step_2.png %}</p>

<p>And the results after 2 passes (these are obviously not the same map, I
had some trouble doing a step by step on one map, but it still
illustrates the idea all the same):</p>

<p>{% img /images/dungeoncrawler/step_3.png %}</p>

<p>As you can see, the cavern starts to take shape, as each tile is changed
to reflect the evironment around it. Finally, after five passes, we end
up with this:</p>

<p>{% img /images/dungeoncrawler/finish_2.png %}</p>

<p>After our five initial passes, I make 4 more using a slightly modified
algorithm. These passes mainly smooth out the caves a little more, and
get rid of any isolated walls or floor tiles that are left sitting in
the middle of nowhere:</p>

<p>{% codeblock Cavern Generation - Step 3 lang:python %}
for _ in range(4):</p>

<pre><code>for x in range(0, len(self.map)):
    for y in range(0, len(self.map[x])):
        wall_count_one_away = self.count_walls_n_steps_away(self.map, 1, x, y)
        tile = self.map[x][y]
        if wall_count_one_away &gt;= 5:
            #This tile becomes a wall
            tile.blocked = True
            tile.block_sight = True
        else:
            tile.blocked = False
            tile.block_sight = False
</code></pre>

<p>{% endcodeblock %}</p>

<p>After these last few iterations, our cave now looks like this:</p>

<p>{% img /images/dungeoncrawler/step_4.png %}</p>

<p>At this point, we have a pretty nice, realistic looking cavern,
but you may notice that there is the potential for rooms that the player
cannot reach, and that are not connected to the main cavern. This is not
ideal, as the player is randomly placed in the cavern when the game
starts, and we do not want him to start in a small cavern not connected
to the main cavern.</p>

<p>To fix this problem, we need to identify each 'cavern' that is part of
the larger cave complex. I define a 'cavern' as a space that is not
connected to any other spaces. So, in the above example, there would be
five caverns, one main, large cavern, and then four smaller caverns
spread out around the edges. Once we have identified the individual caverns in our cave
system, we can then either connect them all (not ideal, as it looks
un-natural), or fill in all but the largest cavern (this is the approach
I take, as it maintains a realistic feel). First, how do we go about
identifying the various caverns that compose our cave system?</p>

<p>I used a flood fill algorithm to accomplish this. But, before we do
anything else, we need to seal up the edges of the map, so the player
cannot wander off the screen (my game does have scrolling maps yet, what
you see is the entire map). This is done as follows:</p>

<p>{% codeblock Sealing the edges of the map lang:python %}</p>

<h1>Before we do anything else, we need to seal up the edges of the map, so the player cannot wander out into</h1>

<h1>nothingness. We do this by walking around the edges of the map and making them all wall</h1>

<p>for x in range(self.width):</p>

<pre><code>for y in range(self.height):
    if x == 0 or y == 0 or x == self.width - 1 or y == self.height - 1:
        self.map[x][y].block_sight = True
        self.map[x][y].blocked = True
</code></pre>

<p>{% endcodeblock %}</p>

<p>Okay, now that we've done that, lets get on to the floodfill algorithm.
The basic logic behind it is this: We loop through every tile on the map
checking for two things. First, have visited this tile already, and
second, is this tile a wall. If either of those is true, we ignore the
tile and move on. When we find a valid, unvisited, floor tile, we add
the tile to an array that will contain all tiles in the particular
cavern (we know we are in a cavern by the fact that this tile is floor).
Next, using our newly added cavern tile, we pop it off of the array, and
check all of its neighbors. If they are unvisited, and not a wall, they
are added to the cavern array. We run this sequence for each valid
neighbor, and each of their valid neighbors. When the array is finally
empty, we have exhausted all tiles in the current cavern, and now know
every tile that the cavern is composed of (when I pop the tile off the
cavern array, I push it onto a record keeping array, so we have record
of every tile in the cavern). At this point, all tiles in the current
cavern have been visited, so they will be ignored going forward. We
continue in this manner until all individual caverns in the cave system
have been mapped out. The code to accomplish this is as follows:</p>

<p>{% codeblock Cavern Floodfill Detection lang:python %}</p>

<h1>Now, begin looping through the map, looking for individual caverns</h1>

<p>for x in range(self.width):</p>

<pre><code>for y in range(self.height):
    #Grab the tile at the current coordinates
    tile = self.map[x][y]

    #Set up some empty arrays to hold our current cavern
    cavern = []
    total_cavern_area = []

    #Ensure this is a non-wall tile that has not already been visited
    if not tile.visited and not tile.is_wall():
        #If it meets the criteria, add it to the new cavern
        cavern.append(tile)

        #Loop through all potentially valid cavern tiles for this cavern, and see if they are actually part
        #of the cavern or not. If they are, add them to the total, and grab all four of their neighbors
        while len(cavern) &gt; 0:
            #Get the last item in the candidate list
            node = cavern.pop()
            if not node.visited and not node.is_wall():
                #Mark the tile as visited
                node.visit(True)
                total_cavern_area.append(node)

                #Append the tile to the west to the cavern array
                if node.x - 1 &gt; 0 and not self.map[node.x - 1][node.y].is_wall():
                    cavern.append(self.map[node.x - 1][node.y])
                #Append the tile to the east to the cavern array
                if node.x + 1 &lt; len(self.map) and not self.map[node.x + 1][node.y].is_wall():
                    cavern.append(self.map[node.x + 1][node.y])
                #Append the tile to the north to the cavern array
                if node.y - 1 &gt; 0 and not self.map[node.x][node.y - 1].is_wall():
                    cavern.append(self.map[node.x][node.y - 1])
                #Append the tile to the south to the cavern array
                if node.y + 1 &lt; len(self.map[x]) and not self.map[node.x][node.y + 1].is_wall():
                    cavern.append(self.map[node.x][node.y + 1])

        #Cavern detection and construction completed, so append this cavern to the list of all caverns
        caverns.append(total_cavern_area)
    else:
        #This was not a valid cavern candidate, so mark it as visited so we dont bother with it again
        tile.visit(True)
</code></pre>

<p>{% endcodeblock %}</p>

<p>The caverns variable is a list off all detected individual caverns. So,
the end result is that we now know about every individual cavern on the
map, and can act on them accordingly. The next thing we do is to sort
the caverns by smallest to largest. This way, the largest cavern
(usually what we want to be the main cavern) will be last, and we can
remove it from the list of caverns. Since we are going to fill in all
but the main cavern, we want to ignore it, so removing it from the list
is the easiest and safest way to do this. Then, we simply fill in all
the remaining caverns:</p>

<p>{% codeblock Sort caverns by size and remove largest lang:python %}</p>

<h1>Sort the cavern arrays so the largest cavern (the main cavern) is the last item, then remove it from the list</h1>

<h1>All the remaining caverns will be filled in</h1>

<p>sorted_caverns = sorted(caverns, lambda x,y: 1 if len(x)>len(y) else -1 if len(x)&lt;len(y) else 0)
main_cave = sorted_caverns.pop()</p>

<h1>Fill in each of the remaining caverns, as they are not part of the main cave. This will ensure that every</h1>

<h1>part of the cavern system is accessible to the player</h1>

<p>for cave in sorted_caverns:</p>

<pre><code>for tile in cave:
    tile.blocked = True
    tile.block_sight = True
</code></pre>

<p>{% endcodeblock %}</p>

<p>And finally, we are left with one main cavern that player can reach
every part of:</p>

<p>{% img /images/dungeoncrawler/final_final.png %}</p>

<p>Pretty nice, if I do say so myself. I've included some more examples of
the final product below. Feel free to comment with any questions or
critiques in the comments below. I hope this has been helpful, or at the
very least midly interesting. YOu can also check out my roguelike in
progress on github <a href="https://github.com/jcerise/DungeonCrawler">here</a>, so
feel free to check out the code and give it a shot. I'm also open to
pull request as well, if you feel so inclined.</p>

<p>{% img /images/dungeoncrawler/final_final_1.png %}</p>

<p>{% img /images/dungeoncrawler/final_final_2.png %}</p>

<p>{% img /images/dungeoncrawler/final_final_3.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polybius Square Encoding in Python]]></title>
    <link href="http://www.readmythings.com/blog/2012/12/04/polybius-square-encoding-in-python/"/>
    <updated>2012-12-04T16:17:00-07:00</updated>
    <id>http://www.readmythings.com/blog/2012/12/04/polybius-square-encoding-in-python</id>
    <content type="html"><![CDATA[<p>I was recently trying to figure out an efficient way to programatically
encode or decode a string into an ADFGX cipher, a (by todays standards)
simple cipher that involves fractionating the string through use of a
Polybius square (using a mixed alphabet), and then performing a columnar
transposition on the result. If you want to read more about the cipher
itself, Wikipedia has a good write up of it <a href="http://en.wikipedia.org/wiki/ADFGVX_cipher">here</a>.</p>

<p>I don't want to go too far into the specifics of the cipher itself, as
this post is meant to focus on the first part, encoding a string using a
Ploybius square, and, what I feel at least, is a rather clever way
of doing it.
i<!-- more -->
So, a Polybius sqaure essentially looks like this:</p>

<table>
  <tr>
    <th> </th>
    <th>A</th>
    <th>D</th>
    <th>F</th>
    <th>G</th>
    <th>X</th>
  </tr>
  <tr>
    <td>A</td>
    <td>b</td>
    <td>t</td>
    <td>a</td>
    <td>l</td>
    <td>p</td>
  </tr>
  <tr>
    <td>D</td>
    <td>d</td>
    <td>h</td>
    <td>o</td>
    <td>z</td>
    <td>k</td>
  </tr>
  <tr>
    <td>F</td>
    <td>q</td>
    <td>f</td>
    <td>v</td>
    <td>s</td>
    <td>n</td>
  </tr>
  <tr>
    <td>G</td>
    <td>g</td>
    <td>j</td>
    <td>c</td>
    <td>u</td>
    <td>x</td>
  </tr>
  <tr>
    <td>X</td>
    <td>m</td>
    <td>r</td>
    <td>e</td>
    <td>w</td>
    <td>y</td>
  </tr>
</table>


<p>To encode a string, you simply take the row header of the letter, and
concatenate the column header of the letter. So, the letter a would be
AF, b would be AA, c would be GF and so on. You may notice that the
square is missing the letter i. In the interest of keeping it square, i
has been combined with j. There is a slightly modified version of the
ADFGX cipher, the ADFGVX cipher, that can accomodate for the missing i,
as well as several other characters, such as numbers.</p>

<p>Anyways, at first glance, doing these encodings programatically looks
simple, just look up the row and column of each letter, and combine
them. And to be sure, in theory, it is fairly simple. My first attempt
involved making two, two dimensional associative  arrays, and looping through them
(using the letters ADFGX as the keys) and getting the corresponding
ciper text as the result. While this worked, it did not work well, and
was subject to one major problem: what if you wanted to change the mixed
alphabet? That would involve rewriting each array by hand. Not much fun.
So, my goal was to make it easier to change out the mixed alphabet, and
also find something that would run faster than O(n<sup>2).</sup></p>

<p>The solution I eventually stumbled upon involves representing the mixed
alphabet not as an array, or arrays, but as a simple string. So, the
above mixed alphabet would look like "btalpdhozkqfvsngjcuxmrewy". Using
what we know about the workings of the Polybius square, we can make some
assumptions about what letters correspond to which column and row
headers.First off, to get the row, we can use simple integer division on
the position of each character. We know that the polybius square is 5 x
5, so, each row will have 5 characters. We can divide the character
position in the mixed alphabet string by 5, and figure out the row its
in. 0/5 = 0, 1/5 = 0, 2/5 = 0 etc. Since we are using ints rather than
floats, we can be assured to only get whole numbers. If you continue in
this, you'll see that once we get to char[5], we've moved to a new row (5/5 =
1).Since we have at most 25 characters in our square, this works quite
nicely.</p>

<p>Next, to determine the column, we can use a similar method, replacing
the division with the modulus function. Using the index of each
character, char[n], and calculating char[n] modulus 5, we can easily
figure out which column each character will fall into. 0 % 5 = 0, 1 %
5 = 1 ... 7 % 5 = 2 ...10 % 5 = 0 ... 17 % 5 = 2 ... 24 % 5 = 4 and so
on.</p>

<p>Each of these methods will generate a number from 0 to 4, which we can
then use as an index into the string "ADFGX" to figure out which letter
each corresponds to in the Polybius square. Then, just concatenate both
letters (with the column being the first), and done, you have an encoded
letter.</p>

<p>The best part, this runs in O(n). Oh, and you can specify a mixed
alphabet very easily. The code, in Python, I wrote for this
is as follows:</p>

<p>{% codeblock encode_as_polybius_square lang:python %}
def encode_as_polybius_square(mixed_alphabet, cipher_text):</p>

<pre><code>encoded_text = ""
key = "ADFGX"

#Strip all spaces and lowercase the whole string
cipher_text = cipher_text.strip(' ').replace(" ", "").lower()

for character in cipher_text:
    #Get the row header of the character, generating an
    #index into the key
    column_char = key[mixed_alphabet.index(character) / 5]
    #Get the column header in the same manner
    row_char = key[mixed_alphabet.index(character) % 5]
    #Combine the row header with the column header
    encoded_text += column_char + row_char

return encoded_text
</code></pre>

<p>{% endcodeblock %}</p>

<p>So, there you have it. A fast, simple way to encode a string based on a
Polybius square.</p>

<p>Next time, decoding the same string. Haven't quite thought that out
yet...</p>
]]></content>
  </entry>
  
</feed>
